# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['PackageArgs', 'Package']

@pulumi.input_type
class PackageArgs:
    def __init__(__self__, *,
                 language: Optional[str] = None,
                 name: Optional[str] = None,
                 server_bucket_name: Optional[pulumi.Input[str]] = None,
                 server_bucket_website_endpoint: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Package resource.
        :param str language: Language of the pulumi package (typescript, go, c#, python).
        :param str name: Name of the pulumi package
        :param pulumi.Input[str] server_bucket_name: Name s3 bucket for plugin publication.
        :param pulumi.Input[str] server_bucket_website_endpoint: Website endpoint for s3 plugin server
        """
        if language is not None:
            pulumi.set(__self__, "language", language)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if server_bucket_name is not None:
            pulumi.set(__self__, "server_bucket_name", server_bucket_name)
        if server_bucket_website_endpoint is not None:
            pulumi.set(__self__, "server_bucket_website_endpoint", server_bucket_website_endpoint)

    @property
    @pulumi.getter
    def language(self) -> Optional[str]:
        """
        Language of the pulumi package (typescript, go, c#, python).
        """
        return pulumi.get(self, "language")

    @language.setter
    def language(self, value: Optional[str]):
        pulumi.set(self, "language", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the pulumi package
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="serverBucketName")
    def server_bucket_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name s3 bucket for plugin publication.
        """
        return pulumi.get(self, "server_bucket_name")

    @server_bucket_name.setter
    def server_bucket_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_bucket_name", value)

    @property
    @pulumi.getter(name="serverBucketWebsiteEndpoint")
    def server_bucket_website_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        Website endpoint for s3 plugin server
        """
        return pulumi.get(self, "server_bucket_website_endpoint")

    @server_bucket_website_endpoint.setter
    def server_bucket_website_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_bucket_website_endpoint", value)


class Package(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 language: Optional[str] = None,
                 name: Optional[str] = None,
                 server_bucket_name: Optional[pulumi.Input[str]] = None,
                 server_bucket_website_endpoint: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Package resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param str language: Language of the pulumi package (typescript, go, c#, python).
        :param str name: Name of the pulumi package
        :param pulumi.Input[str] server_bucket_name: Name s3 bucket for plugin publication.
        :param pulumi.Input[str] server_bucket_website_endpoint: Website endpoint for s3 plugin server
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[PackageArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Package resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param PackageArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PackageArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 language: Optional[str] = None,
                 name: Optional[str] = None,
                 server_bucket_name: Optional[pulumi.Input[str]] = None,
                 server_bucket_website_endpoint: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PackageArgs.__new__(PackageArgs)

            __props__.__dict__["language"] = language
            __props__.__dict__["name"] = name
            __props__.__dict__["server_bucket_name"] = server_bucket_name
            __props__.__dict__["server_bucket_website_endpoint"] = server_bucket_website_endpoint
            __props__.__dict__["releases"] = None
        super(Package, __self__).__init__(
            'pulumi-package:index:Package',
            resource_name,
            __props__,
            opts,
            remote=True)

    @property
    @pulumi.getter
    def releases(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Language of the pulumi package (typescript, go, c#, python).
        """
        return pulumi.get(self, "releases")

